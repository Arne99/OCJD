// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package suncertify.admin.service;

public final class LocableRemoteRoomOfferServiceProxy_Stub
    extends java.rmi.server.RemoteStub
    implements suncertify.common.RoomOfferService, java.rmi.Remote
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("suncertify.common.RoomOffer bookRoomOffer(suncertify.common.BookRoomCommand)"),
	new java.rmi.server.Operation("suncertify.common.RoomOffer createRoomOffer(suncertify.common.CreateRoomCommand)"),
	new java.rmi.server.Operation("int deleteRoomOffer(suncertify.common.DeleteRoomCommand)"),
	new java.rmi.server.Operation("java.util.List findRoomOffer(suncertify.common.FindRoomCommand)"),
	new java.rmi.server.Operation("suncertify.common.RoomOffer updateRoomOffer(suncertify.common.UpdateRoomCommand)")
    };
    
    private static final long interfaceHash = 1053142336499096830L;
    
    private static final long serialVersionUID = 2;
    
    private static boolean useNewInvoke;
    private static java.lang.reflect.Method $method_bookRoomOffer_0;
    private static java.lang.reflect.Method $method_createRoomOffer_1;
    private static java.lang.reflect.Method $method_deleteRoomOffer_2;
    private static java.lang.reflect.Method $method_findRoomOffer_3;
    private static java.lang.reflect.Method $method_updateRoomOffer_4;
    
    static {
	try {
	    java.rmi.server.RemoteRef.class.getMethod("invoke",
		new java.lang.Class[] {
		    java.rmi.Remote.class,
		    java.lang.reflect.Method.class,
		    java.lang.Object[].class,
		    long.class
		});
	    useNewInvoke = true;
	    $method_bookRoomOffer_0 = suncertify.common.RoomOfferService.class.getMethod("bookRoomOffer", new java.lang.Class[] {suncertify.common.BookRoomCommand.class});
	    $method_createRoomOffer_1 = suncertify.common.RoomOfferService.class.getMethod("createRoomOffer", new java.lang.Class[] {suncertify.common.CreateRoomCommand.class});
	    $method_deleteRoomOffer_2 = suncertify.common.RoomOfferService.class.getMethod("deleteRoomOffer", new java.lang.Class[] {suncertify.common.DeleteRoomCommand.class});
	    $method_findRoomOffer_3 = suncertify.common.RoomOfferService.class.getMethod("findRoomOffer", new java.lang.Class[] {suncertify.common.FindRoomCommand.class});
	    $method_updateRoomOffer_4 = suncertify.common.RoomOfferService.class.getMethod("updateRoomOffer", new java.lang.Class[] {suncertify.common.UpdateRoomCommand.class});
	} catch (java.lang.NoSuchMethodException e) {
	    useNewInvoke = false;
	}
    }
    
    // constructors
    public LocableRemoteRoomOfferServiceProxy_Stub() {
	super();
    }
    public LocableRemoteRoomOfferServiceProxy_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of bookRoomOffer(BookRoomCommand)
    public suncertify.common.RoomOffer bookRoomOffer(suncertify.common.BookRoomCommand $param_BookRoomCommand_1)
	throws java.lang.Exception
    {
	if (useNewInvoke) {
	    Object $result = ref.invoke(this, $method_bookRoomOffer_0, new java.lang.Object[] {$param_BookRoomCommand_1}, -524781279216578706L);
	    return ((suncertify.common.RoomOffer) $result);
	} else {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_BookRoomCommand_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    suncertify.common.RoomOffer $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (suncertify.common.RoomOffer) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	}
    }
    
    // implementation of createRoomOffer(CreateRoomCommand)
    public suncertify.common.RoomOffer createRoomOffer(suncertify.common.CreateRoomCommand $param_CreateRoomCommand_1)
	throws java.lang.Exception
    {
	if (useNewInvoke) {
	    Object $result = ref.invoke(this, $method_createRoomOffer_1, new java.lang.Object[] {$param_CreateRoomCommand_1}, -4608630833326807622L);
	    return ((suncertify.common.RoomOffer) $result);
	} else {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 1, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_CreateRoomCommand_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    suncertify.common.RoomOffer $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (suncertify.common.RoomOffer) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	}
    }
    
    // implementation of deleteRoomOffer(DeleteRoomCommand)
    public int deleteRoomOffer(suncertify.common.DeleteRoomCommand $param_DeleteRoomCommand_1)
	throws java.lang.Exception
    {
	if (useNewInvoke) {
	    Object $result = ref.invoke(this, $method_deleteRoomOffer_2, new java.lang.Object[] {$param_DeleteRoomCommand_1}, 7539150007876239823L);
	    return ((java.lang.Integer) $result).intValue();
	} else {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 2, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_DeleteRoomCommand_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    int $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	}
    }
    
    // implementation of findRoomOffer(FindRoomCommand)
    public java.util.List findRoomOffer(suncertify.common.FindRoomCommand $param_FindRoomCommand_1)
	throws java.lang.Exception
    {
	if (useNewInvoke) {
	    Object $result = ref.invoke(this, $method_findRoomOffer_3, new java.lang.Object[] {$param_FindRoomCommand_1}, 2447966027045611465L);
	    return ((java.util.List) $result);
	} else {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 3, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_FindRoomCommand_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    java.util.List $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (java.util.List) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	}
    }
    
    // implementation of updateRoomOffer(UpdateRoomCommand)
    public suncertify.common.RoomOffer updateRoomOffer(suncertify.common.UpdateRoomCommand $param_UpdateRoomCommand_1)
	throws java.lang.Exception
    {
	if (useNewInvoke) {
	    Object $result = ref.invoke(this, $method_updateRoomOffer_4, new java.lang.Object[] {$param_UpdateRoomCommand_1}, 1726632340917501442L);
	    return ((suncertify.common.RoomOffer) $result);
	} else {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 4, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_UpdateRoomCommand_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    suncertify.common.RoomOffer $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (suncertify.common.RoomOffer) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	}
    }
}
