// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package suncertify.domain;

@SuppressWarnings("deprecation")
public final class UrlyBirdRoomOfferService_Stub extends
	java.rmi.server.RemoteStub implements
	suncertify.common.RoomOfferService {
    private static final java.rmi.server.Operation[] operations = {
	    new java.rmi.server.Operation(
		    "suncertify.common.RoomOffer bookRoomOffer(suncertify.common.BookRoomCommand)"),
	    new java.rmi.server.Operation(
		    "suncertify.common.RoomOffer createRoomOffer(suncertify.common.CreateRoomCommand)"),
	    new java.rmi.server.Operation(
		    "int deleteRoomOffer(suncertify.common.DeleteRoomCommand)"),
	    new java.rmi.server.Operation(
		    "java.util.List findRoomOffer(suncertify.common.FindRoomCommand)"),
	    new java.rmi.server.Operation(
		    "suncertify.common.RoomOffer updateRoomOffer(suncertify.common.UpdateRoomCommand)") };

    private static final long interfaceHash = 1053142336499096830L;

    private static final long serialVersionUID = 2;

    private static boolean useNewInvoke;
    private static java.lang.reflect.Method $method_bookRoomOffer_0;
    private static java.lang.reflect.Method $method_createRoomOffer_1;
    private static java.lang.reflect.Method $method_deleteRoomOffer_2;
    private static java.lang.reflect.Method $method_findRoomOffer_3;
    private static java.lang.reflect.Method $method_updateRoomOffer_4;

    static {
	try {
	    java.rmi.server.RemoteRef.class.getMethod("invoke",
		    new java.lang.Class[] { java.rmi.Remote.class,
			    java.lang.reflect.Method.class,
			    java.lang.Object[].class, long.class });
	    useNewInvoke = true;
	    $method_bookRoomOffer_0 = suncertify.common.RoomOfferService.class
		    .getMethod(
			    "bookRoomOffer",
			    new java.lang.Class[] { suncertify.common.BookRoomCommand.class });
	    $method_createRoomOffer_1 = suncertify.common.RoomOfferService.class
		    .getMethod(
			    "createRoomOffer",
			    new java.lang.Class[] { suncertify.common.CreateRoomCommand.class });
	    $method_deleteRoomOffer_2 = suncertify.common.RoomOfferService.class
		    .getMethod(
			    "deleteRoomOffer",
			    new java.lang.Class[] { suncertify.common.DeleteRoomCommand.class });
	    $method_findRoomOffer_3 = suncertify.common.RoomOfferService.class
		    .getMethod(
			    "findRoomOffer",
			    new java.lang.Class[] { suncertify.common.FindRoomCommand.class });
	    $method_updateRoomOffer_4 = suncertify.common.RoomOfferService.class
		    .getMethod(
			    "updateRoomOffer",
			    new java.lang.Class[] { suncertify.common.UpdateRoomCommand.class });
	} catch (final java.lang.NoSuchMethodException e) {
	    useNewInvoke = false;
	}
    }

    // constructors
    public UrlyBirdRoomOfferService_Stub() {
	super();
    }

    public UrlyBirdRoomOfferService_Stub(final java.rmi.server.RemoteRef ref) {
	super(ref);
    }

    // methods from remote interfaces

    // implementation of bookRoomOffer(BookRoomCommand)
    @Override
    public suncertify.common.RoomOffer bookRoomOffer(
	    final suncertify.common.BookRoomCommand $param_BookRoomCommand_1)
	    throws java.lang.Exception {
	if (useNewInvoke) {
	    final Object $result = ref.invoke(this, $method_bookRoomOffer_0,
		    new java.lang.Object[] { $param_BookRoomCommand_1 },
		    -524781279216578706L);
	    return ((suncertify.common.RoomOffer) $result);
	} else {
	    final java.rmi.server.RemoteCall call = ref.newCall(this,
		    operations, 0, interfaceHash);
	    try {
		final java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_BookRoomCommand_1);
	    } catch (final java.io.IOException e) {
		throw new java.rmi.MarshalException(
			"error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    suncertify.common.RoomOffer $result;
	    try {
		final java.io.ObjectInput in = call.getInputStream();
		$result = (suncertify.common.RoomOffer) in.readObject();
	    } catch (final java.io.IOException e) {
		throw new java.rmi.UnmarshalException(
			"error unmarshalling return", e);
	    } catch (final java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException(
			"error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	}
    }

    // implementation of createRoomOffer(CreateRoomCommand)
    @Override
    public suncertify.common.RoomOffer createRoomOffer(
	    final suncertify.common.CreateRoomCommand $param_CreateRoomCommand_1)
	    throws java.lang.Exception {
	if (useNewInvoke) {
	    final Object $result = ref.invoke(this, $method_createRoomOffer_1,
		    new java.lang.Object[] { $param_CreateRoomCommand_1 },
		    -4608630833326807622L);
	    return ((suncertify.common.RoomOffer) $result);
	} else {
	    final java.rmi.server.RemoteCall call = ref.newCall(this,
		    operations, 1, interfaceHash);
	    try {
		final java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_CreateRoomCommand_1);
	    } catch (final java.io.IOException e) {
		throw new java.rmi.MarshalException(
			"error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    suncertify.common.RoomOffer $result;
	    try {
		final java.io.ObjectInput in = call.getInputStream();
		$result = (suncertify.common.RoomOffer) in.readObject();
	    } catch (final java.io.IOException e) {
		throw new java.rmi.UnmarshalException(
			"error unmarshalling return", e);
	    } catch (final java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException(
			"error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	}
    }

    // implementation of deleteRoomOffer(DeleteRoomCommand)
    @Override
    public int deleteRoomOffer(
	    final suncertify.common.DeleteRoomCommand $param_DeleteRoomCommand_1)
	    throws java.lang.Exception {
	if (useNewInvoke) {
	    final Object $result = ref.invoke(this, $method_deleteRoomOffer_2,
		    new java.lang.Object[] { $param_DeleteRoomCommand_1 },
		    7539150007876239823L);
	    return ((java.lang.Integer) $result).intValue();
	} else {
	    final java.rmi.server.RemoteCall call = ref.newCall(this,
		    operations, 2, interfaceHash);
	    try {
		final java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_DeleteRoomCommand_1);
	    } catch (final java.io.IOException e) {
		throw new java.rmi.MarshalException(
			"error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    int $result;
	    try {
		final java.io.ObjectInput in = call.getInputStream();
		$result = in.readInt();
	    } catch (final java.io.IOException e) {
		throw new java.rmi.UnmarshalException(
			"error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	}
    }

    // implementation of findRoomOffer(FindRoomCommand)
    @Override
    public java.util.List findRoomOffer(
	    final suncertify.common.FindRoomCommand $param_FindRoomCommand_1)
	    throws java.lang.Exception {
	if (useNewInvoke) {
	    final Object $result = ref.invoke(this, $method_findRoomOffer_3,
		    new java.lang.Object[] { $param_FindRoomCommand_1 },
		    2447966027045611465L);
	    return ((java.util.List) $result);
	} else {
	    final java.rmi.server.RemoteCall call = ref.newCall(this,
		    operations, 3, interfaceHash);
	    try {
		final java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_FindRoomCommand_1);
	    } catch (final java.io.IOException e) {
		throw new java.rmi.MarshalException(
			"error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    java.util.List $result;
	    try {
		final java.io.ObjectInput in = call.getInputStream();
		$result = (java.util.List) in.readObject();
	    } catch (final java.io.IOException e) {
		throw new java.rmi.UnmarshalException(
			"error unmarshalling return", e);
	    } catch (final java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException(
			"error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	}
    }

    // implementation of updateRoomOffer(UpdateRoomCommand)
    @Override
    public suncertify.common.RoomOffer updateRoomOffer(
	    final suncertify.common.UpdateRoomCommand $param_UpdateRoomCommand_1)
	    throws java.lang.Exception {
	if (useNewInvoke) {
	    final Object $result = ref.invoke(this, $method_updateRoomOffer_4,
		    new java.lang.Object[] { $param_UpdateRoomCommand_1 },
		    1726632340917501442L);
	    return ((suncertify.common.RoomOffer) $result);
	} else {
	    final java.rmi.server.RemoteCall call = ref.newCall(this,
		    operations, 4, interfaceHash);
	    try {
		final java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_UpdateRoomCommand_1);
	    } catch (final java.io.IOException e) {
		throw new java.rmi.MarshalException(
			"error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    suncertify.common.RoomOffer $result;
	    try {
		final java.io.ObjectInput in = call.getInputStream();
		$result = (suncertify.common.RoomOffer) in.readObject();
	    } catch (final java.io.IOException e) {
		throw new java.rmi.UnmarshalException(
			"error unmarshalling return", e);
	    } catch (final java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException(
			"error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	}
    }
}
